{
    "search_files_for_word": {
        "code": "def search_files_for_word(directory, word):\n    \"\"\"\n    Search through each text file in the specified directory to check if they contain the specified word.\n    List all file names that match this criterion.\n\n    Args:\n    directory (str): The path to the directory containing the text files.\n    word (str): The word to search for in the text files.\n\n    Returns:\n    list: A list of filenames where the word is found.\n    \"\"\"\n    import os\n\n    # List to hold filenames that contain the specified word\n    matching_files = []\n\n    # Iterate through files in the specified directory\n    for filename in os.listdir(directory):\n        # Construct the full file path\n        file_path = os.path.join(directory, filename)\n        \n        # Check if it's a file and has a .txt extension\n        if os.path.isfile(file_path) and filename.endswith('.txt'):\n            with open(file_path, 'r', encoding='utf-8') as file:\n                content = file.read()\n                # Check if the word is in the file content\n                if word in content:\n                    matching_files.append(filename)\n\n    return matching_files",
        "description": "Search through each text file in the specified directory to check if they contain the specified word"
    },
    "create_folder": {
        "code": "import os\n\ndef create_folder(working_directory, folder_name):\n    \"\"\"\n    Create a folder under the specified working directory or the default working directory.\n\n    Args:\n    working_directory (str): The path of the working directory. If not provided, the default working directory will be used.\n    folder_name (str): The name of the folder to be created. Default is 'myfold'.\n\n    Returns:\n    None\n    \"\"\"\n    # Check if the working_directory is provided, if not, use the default working directory\n    if working_directory:\n        os.chdir(working_directory)\n\n    # Create the folder\n    os.makedirs(folder_name)\n\n",
        "description": "Create a folder under the specified working directory or the default working directory"
    },
    "compose_and_send_email": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef compose_and_send_email(recipient, subject, body):\n    \"\"\"\n    Compose a new email and send it to other people.\n\n    Args:\n    recipient(str): the recipient's email\n    subject(str): the e-mail's subject\n    body(str): the e-mail's body\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n    \n    try:\n        output = subprocess.check_output(['xdotool', 'search', '--onlyvisible', '--name', 'Outlook']).decode('utf-8')\n        window_ids = output.strip().split('\\n')\n        window_id = window_ids[0]\n    except subprocess.CalledProcessError:\n        print(\"\u672a\u627e\u5230Outlook\u7a97\u53e3\")\n    time.sleep(2)\n    \n    try:\n        subprocess.run(['xdotool', 'windowactivate', window_id], check=True)\n        pyautogui.press('esc')  # Close any open mail window from the previous run\n        pyautogui.hotkey('ctrl', 'shift', '1')  # Go to Mail view\n        pyautogui.hotkey('home')  # Move to the top of the message list\n    except subprocess.CalledProcessError as e:\n        print(f\"Error activating Outlook: {e}\")\n    time.sleep(2)\n    try:\n        subprocess.run([\"xdotool\", \"key\", \"n\"])\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", recipient])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Return\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", subject])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", body])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"ctrl+Return\"])\n        time.sleep(2)\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n        \n    return False\n\n",
        "description": "Compose a new email and send it to other people"
    },
    "open_email": {
        "code": "import subprocess\nimport pyautogui\nimport time\n\ndef open_email(folder, mail_index):\n    \"\"\"\n    Open an email, and user can read email from three folders: Inbox, Drafts and Sent.\n\n    Args:\n    folder(str): the folder's name - Inbox, Drafts, Sent Items\n    mail_index(int): the e-mail's index\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n    try:\n        output = subprocess.check_output(['xdotool', 'search', '--onlyvisible', '--name', 'Outlook']).decode('utf-8')\n        window_ids = output.strip().split('\\n')\n        window_id = window_ids[0]\n    except subprocess.CalledProcessError:\n        print(\"\u672a\u627e\u5230Outlook\u7a97\u53e3\")\n        return False\n    time.sleep(2)\n\n    try:\n        subprocess.run(['xdotool', 'windowactivate', window_id], check=True)\n        pyautogui.press('esc')  # Close any open mail window from the previous run\n        pyautogui.hotkey('ctrl', 'shift', '1')  # Go to Mail view\n        pyautogui.hotkey('ctrl', 'y')  # Go to Folder pane\n        pyautogui.hotkey('home')  # Move to the top of the folder list\n    except subprocess.CalledProcessError as e:\n        print(f\"Error activating Outlook: {e}\")\n\n    folder_shortcuts = {\n        \"Inbox\": ['g', 'i'],\n        \"Drafts\": ['g', 'd'],\n        \"Sent\": ['g', 's']\n    }\n    if folder_index in folder_shortcuts:\n        shortcut = folder_shortcuts[folder]\n        pyautogui.press(shortcut[0])\n        pyautogui.press(shortcut[1])\n    else:\n        print(\"\u65e0\u6548\u7684\u6587\u4ef6\u5939\u9009\u62e9\")\n    time.sleep(2)\n\n    pyautogui.hotkey('home')  # Move to the top of the message list\n    for i in range(mail_index - 1):\n        pyautogui.hotkey('down')  # Move down to the target message\n    \n    time.sleep(1)\n    return True\n \n",
        "description": "Open an email, and user can read email from three folders: Inbox, Drafts and Sent"
    },
    "search_email_by_keyword": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef search_email_by_keyword(keyword):\n    \"\"\"\n    Search the emails by the keyword.\n    \n    Args:\n    keyword(str): the keyword used to search the emails.\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n    \n    try:\n        output = subprocess.check_output(['xdotool', 'search', '--onlyvisible', '--name', 'Outlook']).decode('utf-8')\n        window_ids = output.strip().split('\\n')\n        window_id = window_ids[0]\n    except subprocess.CalledProcessError:\n        print(\"\u672a\u627e\u5230Outlook\u7a97\u53e3\")\n    time.sleep(2)\n    \n    try:\n        subprocess.run(['xdotool', 'windowactivate', window_id], check=True)\n        pyautogui.press('esc')  # Close any open mail window from the previous run\n        pyautogui.hotkey('ctrl', 'shift', '1')  # Go to Mail view\n        pyautogui.hotkey('ctrl', 'y')  # Go to Folder pane\n        pyautogui.hotkey('home')  # Move to the top of the folder list\n    except subprocess.CalledProcessError as e:\n        print(f\"Error activating Outlook: {e}\")\n        \n    try:\n        subprocess.run([\"xdotool\", \"key\", \"alt+q\"])\n        subprocess.run([\"xdotool\", \"key\", \"ctrl+a\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", keyword])\n        subprocess.run([\"xdotool\", \"key\", \"Return\"])\n        time.sleep(2)\n        pyautogui.hotkey('ctrl', 'home')\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n        \n    return False\n\n",
        "description": "Search the emails by the keyword"
    },
    "search_email_by_subject": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef search_email_by_subject(subject):\n    \"\"\"\n    Search the emails by the subject.\n    \n    Args:\n    subject(str): the subject used to search the emails.\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n    \n    try:\n        output = subprocess.check_output(['xdotool', 'search', '--onlyvisible', '--name', 'Outlook']).decode('utf-8')\n        window_ids = output.strip().split('\\n')\n        window_id = window_ids[0]\n    except subprocess.CalledProcessError:\n        print(\"\u672a\u627e\u5230Outlook\u7a97\u53e3\")\n    time.sleep(2)\n    \n    try:\n        subprocess.run(['xdotool', 'windowactivate', window_id], check=True)\n        pyautogui.press('esc')  # Close any open mail window from the previous run\n        pyautogui.hotkey('ctrl', 'shift', '1')  # Go to Mail view\n        pyautogui.hotkey('ctrl', 'y')  # Go to Folder pane\n        pyautogui.hotkey('home')  # Move to the top of the folder list\n    except subprocess.CalledProcessError as e:\n        print(f\"Error activating Outlook: {e}\")\n        \n    try:\n        subprocess.run([\"xdotool\", \"key\", \"alt+q\"])\n        subprocess.run([\"xdotool\", \"key\", \"ctrl+a\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", \"subject:(\"])\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", subject])\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", \")\"])\n        subprocess.run([\"xdotool\", \"key\", \"Return\"])\n        time.sleep(2)\n        pyautogui.hotkey('ctrl', 'home')\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n    \n    return False\n\n",
        "description": "Search the emails by the subject"
    },
    "search_email_by_from": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef search_email_by_from(from_email):\n    \"\"\"\n    Search the emails by the from.\n    \n    Args:\n    from(str): the from used to search the emails.\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n    \n    try:\n        output = subprocess.check_output(['xdotool', 'search', '--onlyvisible', '--name', 'Outlook']).decode('utf-8')\n        window_ids = output.strip().split('\\n')\n        window_id = window_ids[0]\n    except subprocess.CalledProcessError:\n        print(\"\u672a\u627e\u5230Outlook\u7a97\u53e3\")\n    time.sleep(2)\n    \n    try:\n        subprocess.run(['xdotool', 'windowactivate', window_id], check=True)\n        pyautogui.press('esc')  # Close any open mail window from the previous run\n        pyautogui.hotkey('ctrl', 'shift', '1')  # Go to Mail view\n        pyautogui.hotkey('ctrl', 'y')  # Go to Folder pane\n        pyautogui.hotkey('home')  # Move to the top of the folder list\n    except subprocess.CalledProcessError as e:\n        print(f\"Error activating Outlook: {e}\")\n        \n    try:\n        subprocess.run([\"xdotool\", \"key\", \"alt+q\"])\n        subprocess.run([\"xdotool\", \"key\", \"ctrl+a\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", \"from:(\"])\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", from_email])\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", \")\"])\n        subprocess.run([\"xdotool\", \"key\", \"Return\"])\n        time.sleep(2)\n        pyautogui.hotkey('ctrl', 'home')\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n    \n    return False\n\n",
        "description": "Search the emails by the from"
    },
    "delete_email": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef delete_email():\n    \"\"\"\n    Delete the email(s).\n    \n    Args:\n    None\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n        \n    try:\n        pyautogui.hotkey('down')\n        pyautogui.hotkey('up')\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Delete\"])\n        time.sleep(2)\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n        \n    return False\n\n",
        "description": "Delete the email(s)"
    },
    "write_and_save_draft_email": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef write_and_save_draft_email(recipient, subject, body):\n    \"\"\"\n    Compose a new email and save it as draft.\n\n    Args:\n    recipient(str): the recipient's email\n    subject(str): the e-mail's subject\n    body(str): the e-mail's body\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n    try:\n        output = subprocess.check_output(['xdotool', 'search', '--onlyvisible', '--name', 'Outlook']).decode('utf-8')\n        window_ids = output.strip().split('\\n')\n        window_id = window_ids[0]\n    except subprocess.CalledProcessError:\n        print(\"\u672a\u627e\u5230Outlook\u7a97\u53e3\")\n    time.sleep(2)\n    \n    try:\n        subprocess.run(['xdotool', 'windowactivate', window_id], check=True)\n        pyautogui.press('esc')  # Close any open mail window from the previous run\n        pyautogui.hotkey('ctrl', 'shift', '1')  # Go to Mail view\n        pyautogui.hotkey('home')  # Move to the top of the message list\n    except subprocess.CalledProcessError as e:\n        print(f\"Error activating Outlook: {e}\")\n    time.sleep(2)\n    \n    try:\n        subprocess.run([\"xdotool\", \"key\", \"n\"])\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", recipient])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Return\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", subject])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", body])\n        time.sleep(1)\n        pyautogui.hotkey('alt')\n        time.sleep(1)\n        pyautogui.hotkey('m')\n        time.sleep(1)\n        pyautogui.hotkey('0')\n        pyautogui.hotkey('0')\n        time.sleep(1)\n        pyautogui.hotkey('s')\n        pyautogui.hotkey('d')\n        time.sleep(2)\n        pyautogui.hotkey('g','d')\n        time.sleep(1)\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n        \n    return False\n\n",
        "description": "Compose a new email and save it as draft"
    },
    "mark_email_as_read": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef mark_email_as_read():\n    \"\"\"\n    Mark the email as read.\n    \n    Args:\n    None\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n        \n    try:\n        pyautogui.hotkey('down')\n        pyautogui.hotkey('up')\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"q\"])\n        time.sleep(2)\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n        \n    return False\n\n",
        "description": "Mark the email as read"
    },
    "mark_email_as_unread": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef mark_email_as_unread():\n    \"\"\"\n    Mark the email as unread.\n    \n    Args:\n    None\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n        \n    try:\n        pyautogui.hotkey('down')\n        pyautogui.hotkey('up')\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"u\"])\n        time.sleep(2)\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n        \n    return False\n\n",
        "description": "Mark the email as unread"
    },
    "mark_email_as_flag": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef mark_email_as_flag():\n    \"\"\"\n    Mark the email as flag.\n    \n    Args:\n    None\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n        \n    try:\n        pyautogui.hotkey('down')\n        pyautogui.hotkey('up')\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Insert\"])\n        time.sleep(2)\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n        \n    return False\n\n",
        "description": "Mark the email as flag"
    },
    "clear_email_mark": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef mark_email_as_read():\n    \"\"\"\n    Clear the email's mark.\n    \n    Args:\n    None\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n        \n    try:\n        pyautogui.hotkey('down')\n        pyautogui.hotkey('up')\n        time.sleep(1)\n        pyautogui.hotkey('Insert')\n        time.sleep(1)\n        pyautogui.hotkey('alt')\n        time.sleep(1)\n        pyautogui.hotkey('h')\n        time.sleep(1)\n        pyautogui.hotkey('u')\n        time.sleep(1)\n        pyautogui.hotkey('e')\n        time.sleep(2)\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n        \n    return False\n\n",
        "description": "Clear the email's mark"
    },
    "find_email": {
        "code": "import subprocess\nimport pyautogui\nimport time\n\ndef find_email(folder, mail_index):\n    \"\"\"\n    Find a email by index, and user can find email from three folders: Inbox, Drafts and Sent.\n\n    Args:\n    folder(str): the folder's name - Inbox, Drafts, Sent Items\n    mail_index(int): the e-mail's index\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n    try:\n        output = subprocess.check_output(['xdotool', 'search', '--onlyvisible', '--name', 'Outlook']).decode('utf-8')\n        window_ids = output.strip().split('\\n')\n        window_id = window_ids[0]\n    except subprocess.CalledProcessError:\n        print(\"\u672a\u627e\u5230Outlook\u7a97\u53e3\")\n        return False\n    time.sleep(2)\n\n    try:\n        subprocess.run(['xdotool', 'windowactivate', window_id], check=True)\n        pyautogui.press('esc')  # Close any open mail window from the previous run\n        pyautogui.hotkey('ctrl', 'shift', '1')  # Go to Mail view\n        pyautogui.hotkey('ctrl', 'y')  # Go to Folder pane\n        pyautogui.hotkey('home')  # Move to the top of the folder list\n    except subprocess.CalledProcessError as e:\n        print(f\"Error activating Outlook: {e}\")\n\n    folder_shortcuts = {\n        \"Inbox\": ['g', 'i'],\n        \"Drafts\": ['g', 'd'],\n        \"Sent\": ['g', 's']\n    }\n    if folder_index in folder_shortcuts:\n        shortcut = folder_shortcuts[folder]\n        pyautogui.press(shortcut[0])\n        pyautogui.press(shortcut[1])\n    else:\n        print(\"\u65e0\u6548\u7684\u6587\u4ef6\u5939\u9009\u62e9\")\n    time.sleep(2)\n\n    pyautogui.hotkey('home')  # Move to the top of the message list\n    for i in range(mail_index - 1):\n        pyautogui.hotkey('down')  # Move down to the target message\n    \n    time.sleep(1)\n    return True\n \n",
        "description": "Find a email by index, and user can find email from three folders: Inbox, Drafts and Sent"
    },
    "create_calendar_event": {
        "code": "import os\nimport subprocess\nimport time\nimport pyautogui\n\ndef create_calendar_event(title, year, month, day, begin_time, end_time, place, event):\n    \"\"\"\n    Create a new event on the Calendar.\n\n    Args:\n    title(str): the event's title.\n    year, month, day(int): the date of the event.\n    begin_time, end_time(str): the event's time, including hour and minute. Such as \"17:00\", and \"07:32\".\n    place(str): where will the event be hold.\n    event(str): the information about event.\n\n    Returns:\n    status(bool): There are two status: True and False. If the status is True, then the task complete. Otherwise, the task not complete.\n    \"\"\"\n    \n    try:\n        output = subprocess.check_output(['xdotool', 'search', '--onlyvisible', '--name', 'Outlook']).decode('utf-8')\n        window_ids = output.strip().split('\\n')\n        window_id = window_ids[0]\n    except subprocess.CalledProcessError:\n        print(\"\u672a\u627e\u5230Outlook\u7a97\u53e3\")\n    time.sleep(2)\n    \n    try:\n        subprocess.run(['xdotool', 'windowactivate', window_id], check=True)\n        pyautogui.press('esc')  # Close any open mail window from the previous run\n        pyautogui.hotkey('ctrl', 'shift', '2')  # Go to Calendar\n    except subprocess.CalledProcessError as e:\n        print(f\"Error activating Outlook: {e}\")\n    time.sleep(2)\n    try:\n        subprocess.run([\"xdotool\", \"key\", \"n\"])\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", title])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        date = year + '/' + month + '/' + day\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", date])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", begin_time])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", end_time])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", place])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"Tab\"])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"type\", \"--delay\", \"100\", event])\n        time.sleep(1)\n        subprocess.run([\"xdotool\", \"key\", \"ctrl+s\"])\n        time.sleep(2)\n        return True\n    except Exception as e:\n        print(f\"Error during search action: {e}\")\n        \n    return False\n\n",
        "description": "Create a new event on the Calendar"
    }
}